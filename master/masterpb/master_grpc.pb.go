// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package masterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	GetAreas(ctx context.Context, in *GetAreasRequest, opts ...grpc.CallOption) (*GetAreasResponse, error)
	GetAssetEquipments(ctx context.Context, in *GetAssetEquipmentsRequest, opts ...grpc.CallOption) (*GetAssetEquipmentsResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) GetAreas(ctx context.Context, in *GetAreasRequest, opts ...grpc.CallOption) (*GetAreasResponse, error) {
	out := new(GetAreasResponse)
	err := c.cc.Invoke(ctx, "/master.MasterService/GetAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetAssetEquipments(ctx context.Context, in *GetAssetEquipmentsRequest, opts ...grpc.CallOption) (*GetAssetEquipmentsResponse, error) {
	out := new(GetAssetEquipmentsResponse)
	err := c.cc.Invoke(ctx, "/master.MasterService/GetAssetEquipments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, "/master.MasterService/GetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	GetAreas(context.Context, *GetAreasRequest) (*GetAreasResponse, error)
	GetAssetEquipments(context.Context, *GetAssetEquipmentsRequest) (*GetAssetEquipmentsResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) GetAreas(context.Context, *GetAreasRequest) (*GetAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreas not implemented")
}
func (UnimplementedMasterServiceServer) GetAssetEquipments(context.Context, *GetAssetEquipmentsRequest) (*GetAssetEquipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetEquipments not implemented")
}
func (UnimplementedMasterServiceServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_GetAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.MasterService/GetAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetAreas(ctx, req.(*GetAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetAssetEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetEquipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetAssetEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.MasterService/GetAssetEquipments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetAssetEquipments(ctx, req.(*GetAssetEquipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.MasterService/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAreas",
			Handler:    _MasterService_GetAreas_Handler,
		},
		{
			MethodName: "GetAssetEquipments",
			Handler:    _MasterService_GetAssetEquipments_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _MasterService_GetContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "masterpb/master.proto",
}
