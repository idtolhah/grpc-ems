version: '3.7'
services:
  master-query:
    build: 
      context: .
      dockerfile: master-query/Dockerfile
    container_name: master-query
    ports:
      - '50051:50051'
    image: master:latest
    networks:
      - my-network
    depends_on:
      - mysql-master
        # condition: service_healthy

  user-query:
    build: 
      context: .
      dockerfile: user-query/Dockerfile
    container_name: user-query
    ports:
      - '50052:50052'
    image: user:latest
    networks:
      - my-network
    # depends_on:
    #   mongo:
        # condition: service_healthy

  packing-query:
    build: 
      context: .
      dockerfile: packing-query/Dockerfile
    container_name: packing-query
    ports:
      - '50053:50053'
    image: packing-query:latest
    networks:
      - my-network
    depends_on:
      - mysql-master
        # condition: service_healthy

  packing-cmd:
    build: 
      context: .
      dockerfile: packing-cmd/Dockerfile
    container_name: packing-cmd
    ports:
      - '50054:50054'
    image: packing-cmd:latest
    networks:
      - my-network
    depends_on:
      - mysql-master
        # condition: service_healthy
  
  comment-cmd:
    build: 
      context: .
      dockerfile: comment-cmd/Dockerfile
    container_name: comment-cmd
    ports:
      - '50055:50055'
    image: comment-cmd:latest
    networks:
      - my-network
    depends_on:
      - mysql-master
        # condition: service_healthy

  bff:
    build: 
      context: .
      dockerfile: bff/Dockerfile
    container_name: bff
    ports:
      - '8080:8080'
    image: bff:latest
    networks:
      - my-network
  #   depends_on:
  #     master:
  #       condition: service_healthy
  #     user:
  #       condition: service_healthy
  #     packing-query:
  #       condition: service_healthy
  #     packing-cmd:
  #       condition: service_healthy
  #     comment-cmd:
  #       condition: service_healthy

  mongo:
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - '/Users/tolhah/Documents/Projects/000DATABASE/mongo:/data/db'
    image: mongo
    networks:
      - my-network
    # healthcheck:
    #   test: ["CMD", "curl", "--connect-timeout 10", "--silent", "--show-error", "localhost:27017"]
    #   timeout: 20s
    #   retries: 10
  
  mysql-master:
    image: mariadb:10.5.8
    container_name: mysql-master
    ports:
      - '3306:3306'
    restart: unless-stopped
    env_file: ./master/.env.master
    cap_add:
      - all
    volumes:
      - ./master/data:/var/lib/mysql
      - ./master/my.cnf:/etc/my.cnf
    environment:
      - TZ:${TZ}
      - MYSQL_USER:${MYSQL_USER}
      - MYSQL_PASSWORD:${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD:${MYSQL_PASSWORD}
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # mysql-slave:
  #   image: mariadb:10.5.8
  #   container_name: mysql-slave
  #   ports:
  #     - '3306:3306'
  #   restart: unless-stopped
  #   env_file: ./slave/.env.slave
  #   cap_add:
  #     - all
  #   volumes:
  #     - ./slave/data:/var/lib/mysql
  #     - ./slave/my.cnf:/etc/my.cnf
  #   environment:
  #     - TZ:${TZ}
  #     - MYSQL_USER:${MYSQL_USER}
  #     - MYSQL_PASSWORD:${MYSQL_PASSWORD}
  #     - MYSQL_ROOT_PASSWORD:${MYSQL_ROOT_PASSWORD}
  #   networks:
  #     - my-network
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
  #     timeout: 20s
  #     retries: 10
  
  redis:
    container_name: redis
    ports:
      - '6379:6379'
    image: redis
    networks:
      - my-network
  
  prometheus:
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - '/Users/tolhah/Documents/Research/Golang/grpc-ems-2/prometheus.yml:/etc/prometheus/prometheus.yml'
    image: prom/prometheus

networks:
  my-network:
    # driver: bridge
