// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package packingquerypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackingQueryServiceClient is the client API for PackingQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackingQueryServiceClient interface {
	// All
	GetPackings(ctx context.Context, in *GetPackingsRequest, opts ...grpc.CallOption) (*GetPackingsResponse, error)
	GetPacking(ctx context.Context, in *GetPackingRequest, opts ...grpc.CallOption) (*GetPackingResponse, error)
}

type packingQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackingQueryServiceClient(cc grpc.ClientConnInterface) PackingQueryServiceClient {
	return &packingQueryServiceClient{cc}
}

func (c *packingQueryServiceClient) GetPackings(ctx context.Context, in *GetPackingsRequest, opts ...grpc.CallOption) (*GetPackingsResponse, error) {
	out := new(GetPackingsResponse)
	err := c.cc.Invoke(ctx, "/packingquerypb.PackingQueryService/GetPackings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packingQueryServiceClient) GetPacking(ctx context.Context, in *GetPackingRequest, opts ...grpc.CallOption) (*GetPackingResponse, error) {
	out := new(GetPackingResponse)
	err := c.cc.Invoke(ctx, "/packingquerypb.PackingQueryService/GetPacking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackingQueryServiceServer is the server API for PackingQueryService service.
// All implementations must embed UnimplementedPackingQueryServiceServer
// for forward compatibility
type PackingQueryServiceServer interface {
	// All
	GetPackings(context.Context, *GetPackingsRequest) (*GetPackingsResponse, error)
	GetPacking(context.Context, *GetPackingRequest) (*GetPackingResponse, error)
	mustEmbedUnimplementedPackingQueryServiceServer()
}

// UnimplementedPackingQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackingQueryServiceServer struct {
}

func (UnimplementedPackingQueryServiceServer) GetPackings(context.Context, *GetPackingsRequest) (*GetPackingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackings not implemented")
}
func (UnimplementedPackingQueryServiceServer) GetPacking(context.Context, *GetPackingRequest) (*GetPackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacking not implemented")
}
func (UnimplementedPackingQueryServiceServer) mustEmbedUnimplementedPackingQueryServiceServer() {}

// UnsafePackingQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackingQueryServiceServer will
// result in compilation errors.
type UnsafePackingQueryServiceServer interface {
	mustEmbedUnimplementedPackingQueryServiceServer()
}

func RegisterPackingQueryServiceServer(s grpc.ServiceRegistrar, srv PackingQueryServiceServer) {
	s.RegisterService(&PackingQueryService_ServiceDesc, srv)
}

func _PackingQueryService_GetPackings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackingQueryServiceServer).GetPackings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packingquerypb.PackingQueryService/GetPackings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackingQueryServiceServer).GetPackings(ctx, req.(*GetPackingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackingQueryService_GetPacking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackingQueryServiceServer).GetPacking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packingquerypb.PackingQueryService/GetPacking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackingQueryServiceServer).GetPacking(ctx, req.(*GetPackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackingQueryService_ServiceDesc is the grpc.ServiceDesc for PackingQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackingQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packingquerypb.PackingQueryService",
	HandlerType: (*PackingQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackings",
			Handler:    _PackingQueryService_GetPackings_Handler,
		},
		{
			MethodName: "GetPacking",
			Handler:    _PackingQueryService_GetPacking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/packingquerypb/packingquery.proto",
}
