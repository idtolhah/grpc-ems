// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commentcmdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentCmdServiceClient is the client API for CommentCmdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentCmdServiceClient interface {
	CreatePackingComment(ctx context.Context, in *CreatePackingCommentRequest, opts ...grpc.CallOption) (*CreatePackingCommentResponse, error)
}

type commentCmdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentCmdServiceClient(cc grpc.ClientConnInterface) CommentCmdServiceClient {
	return &commentCmdServiceClient{cc}
}

func (c *commentCmdServiceClient) CreatePackingComment(ctx context.Context, in *CreatePackingCommentRequest, opts ...grpc.CallOption) (*CreatePackingCommentResponse, error) {
	out := new(CreatePackingCommentResponse)
	err := c.cc.Invoke(ctx, "/comment.CommentCmdService/CreatePackingComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentCmdServiceServer is the server API for CommentCmdService service.
// All implementations must embed UnimplementedCommentCmdServiceServer
// for forward compatibility
type CommentCmdServiceServer interface {
	CreatePackingComment(context.Context, *CreatePackingCommentRequest) (*CreatePackingCommentResponse, error)
	mustEmbedUnimplementedCommentCmdServiceServer()
}

// UnimplementedCommentCmdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentCmdServiceServer struct {
}

func (UnimplementedCommentCmdServiceServer) CreatePackingComment(context.Context, *CreatePackingCommentRequest) (*CreatePackingCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackingComment not implemented")
}
func (UnimplementedCommentCmdServiceServer) mustEmbedUnimplementedCommentCmdServiceServer() {}

// UnsafeCommentCmdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentCmdServiceServer will
// result in compilation errors.
type UnsafeCommentCmdServiceServer interface {
	mustEmbedUnimplementedCommentCmdServiceServer()
}

func RegisterCommentCmdServiceServer(s grpc.ServiceRegistrar, srv CommentCmdServiceServer) {
	s.RegisterService(&CommentCmdService_ServiceDesc, srv)
}

func _CommentCmdService_CreatePackingComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackingCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentCmdServiceServer).CreatePackingComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentCmdService/CreatePackingComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentCmdServiceServer).CreatePackingComment(ctx, req.(*CreatePackingCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentCmdService_ServiceDesc is the grpc.ServiceDesc for CommentCmdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentCmdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentCmdService",
	HandlerType: (*CommentCmdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackingComment",
			Handler:    _CommentCmdService_CreatePackingComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commentcmdpb/commentcmd.proto",
}
